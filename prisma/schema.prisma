generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/knitcraft_labs/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model ContactInquiry {
  id                String          @id @default(cuid())
  name              String
  email             String
  company           String?
  country           String
  productCategory   ProductCategory
  estimatedQuantity String
  message           String
  status            InquiryStatus   @default(NEW)
  formType          String          @default("contact")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  leadId            String?
  lead              Lead?           @relation(fields: [leadId], references: [id])

  @@map("contact_inquiries")
}

model Lead {
  id               String           @id @default(cuid())
  name             String
  email            String           @unique
  company          String?
  country          String?
  phone            String?
  website          String?
  linkedinUrl      String?
  source           LeadSource       @default(WEBSITE)
  status           LeadStatus       @default(NEW)
  score            Int              @default(0)
  estimatedValue   Float?
  notes            String?
  lastContactDate  DateTime?
  nextFollowUpDate DateTime?
  assignedUserId   String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  analyticsEvents  AnalyticsEvent[]
  communications   Communication[]
  inquiries        ContactInquiry[]
  customer         Customer?
  assignedUser     User?            @relation("LeadAssignee", fields: [assignedUserId], references: [id])
  quotes           Quote[]

  @@map("leads")
}

model Customer {
  id              String          @id @default(cuid())
  name            String
  email           String          @unique
  company         String
  country         String
  phone           String?
  website         String?
  address         String?
  businessType    String?
  establishedYear Int?
  teamSize        String?
  annualVolume    String?
  preferredMOQ    String?
  status          CustomerStatus  @default(PROSPECT)
  lifecycleValue  Float?
  totalOrderValue Float           @default(0)
  lastOrderDate   DateTime?
  notes           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  leadId          String          @unique
  communications  Communication[]
  lead            Lead            @relation(fields: [leadId], references: [id])
  orders          Order[]
  quotes          Quote[]

  @@map("customers")
}

model Product {
  id             String          @id @default(cuid())
  name           String
  category       ProductCategory
  description    String?
  specifications String?
  materials      String?
  colors         String[]
  sizes          String[]
  minimumMOQ     Int
  unitPrice      Float
  setupCost      Float?
  leadTime       Int
  imageUrl       String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  orderItems     OrderItem[]
  quoteItems     QuoteItem[]

  @@map("products")
}

model Quote {
  id            String      @id @default(cuid())
  quoteNumber   String      @unique
  status        QuoteStatus @default(DRAFT)
  totalAmount   Float
  validUntil    DateTime
  terms         String?
  notes         String?
  sentDate      DateTime?
  respondedDate DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  leadId        String
  customerId    String?
  order         Order?
  items         QuoteItem[]
  customer      Customer?   @relation(fields: [customerId], references: [id])
  lead          Lead        @relation(fields: [leadId], references: [id])

  @@map("quotes")
}

model QuoteItem {
  id             String  @id @default(cuid())
  quantity       Int
  unitPrice      Float
  totalPrice     Float
  specifications String?
  notes          String?
  quoteId        String
  productId      String
  product        Product @relation(fields: [productId], references: [id])
  quote          Quote   @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  @@map("quote_items")
}

model Order {
  id                  String      @id @default(cuid())
  orderNumber         String      @unique
  status              OrderStatus @default(PENDING)
  totalAmount         Float
  orderDate           DateTime    @default(now())
  expectedDelivery    DateTime?
  actualDelivery      DateTime?
  shippingAddress     String?
  specialInstructions String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  customerId          String
  quoteId             String?     @unique
  items               OrderItem[]
  customer            Customer    @relation(fields: [customerId], references: [id])
  quote               Quote?      @relation(fields: [quoteId], references: [id])

  @@map("orders")
}

model OrderItem {
  id             String  @id @default(cuid())
  quantity       Int
  unitPrice      Float
  totalPrice     Float
  specifications String?
  notes          String?
  orderId        String
  productId      String
  order          Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Communication {
  id           String            @id @default(cuid())
  type         CommunicationType
  subject      String?
  content      String
  direction    String
  channel      String?
  attachments  String[]
  scheduledFor DateTime?
  sentAt       DateTime?
  readAt       DateTime?
  respondedAt  DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  leadId       String?
  customerId   String?
  createdById  String
  createdBy    User              @relation(fields: [createdById], references: [id])
  customer     Customer?         @relation(fields: [customerId], references: [id])
  lead         Lead?             @relation(fields: [leadId], references: [id])

  @@map("communications")
}

model AnalyticsEvent {
  id          String             @id @default(cuid())
  type        AnalyticsEventType
  eventName   String
  properties  Json?
  sessionId   String?
  userAgent   String?
  ipAddress   String?
  country     String?
  referrer    String?
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  pageUrl     String?
  timestamp   DateTime           @default(now())
  leadId      String?
  userId      String?
  lead        Lead?              @relation(fields: [leadId], references: [id])
  user        User?              @relation(fields: [userId], references: [id])

  @@map("analytics_events")
}

model BusinessMetric {
  id          String   @id @default(cuid())
  metricType  String
  metricName  String
  value       Float
  period      String
  periodStart DateTime
  periodEnd   DateTime
  metadata    Json?
  createdAt   DateTime @default(now())

  @@unique([metricType, metricName, periodStart])
  @@map("business_metrics")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  firstName       String?
  lastName        String?
  email           String           @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  isActive        Boolean          @default(true)
  role            String           @default("USER")
  accounts        Account[]
  sessions        Session[]
  analyticsEvents AnalyticsEvent[]
  communications  Communication[]
  assignedLeads   Lead[]           @relation("LeadAssignee")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ProductCategory {
  SWEATERS
  CARDIGANS
  TSHIRTS
  POLOS
  SPORTSWEAR
  UNIFORMS
  OTHER
}

enum InquiryStatus {
  NEW
  CONTACTED
  QUOTED
  CLOSED
}

enum LeadSource {
  WEBSITE
  REFERRAL
  SOCIAL_MEDIA
  EMAIL_MARKETING
  TRADE_SHOW
  COLD_OUTREACH
  GOOGLE_ADS
  LINKEDIN
  OTHER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATION
  WON
  LOST
  NURTURING
}

enum CustomerStatus {
  PROSPECT
  ACTIVE
  INACTIVE
  CHURNED
}

enum QuoteStatus {
  DRAFT
  SENT
  UNDER_REVIEW
  REVISED
  ACCEPTED
  REJECTED
  EXPIRED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PRODUCTION
  QUALITY_CHECK
  READY_TO_SHIP
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
}

enum CommunicationType {
  EMAIL
  PHONE
  WHATSAPP
  MEETING
  NOTE
}

enum AnalyticsEventType {
  PAGE_VIEW
  CONTACT_FORM
  QUOTE_REQUEST
  EMAIL_OPEN
  EMAIL_CLICK
  DOWNLOAD
  CUSTOM
}
